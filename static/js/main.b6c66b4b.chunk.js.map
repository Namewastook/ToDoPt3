{"version":3,"sources":["ToDoItem.js","ToDoList.js","Actions/index.js","App.js","Reducer/index.js","serviceWorker.js","index.js"],"names":["TodoItem","react_default","a","createElement","className","this","props","completed","type","checked","onClick","handleCheckToDo","title","handleDeleteToDo","Component","TodoList","_this","todos","map","todo","ToDoItem_TodoItem","deleteToDo","id","toggleToDo","MapDispatchToProps","payload","connect","App","state","value","handleChange","event","setState","target","handleAddToDo","key","addTodo","_this2","onKeyDown","placeholder","autofocus","onChange","react_router","exact","path","render","ToDoList","filter","length","react_router_dom","activeClassName","to","clearCompletedToDos","mapDispatchToProps","todoList","initialState","todoReducer","arguments","undefined","action","newest","userId","Math","floor","random","Object","objectSpread","toConsumableArray","concat","newTodosDeleteComp","newTodosDelete","newTodosToggle","Boolean","window","location","hostname","match","store","createStore","ReactDOM","basename","process","es","src_App","pathname","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6c66b4b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={this.props.completed}\n            onClick={this.props.handleCheckToDo}\n          />\n          <label>{this.props.title}</label>\n          <button onClick={this.props.handleDeleteToDo} className=\"destroy\" />\n        </div>\n      </li>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ToDoItem from \"./ToDoItem\";\nimport { toggleToDo, deleteToDo } from \"./Actions\";\nimport { connect } from \"react-redux\";\n\nclass TodoList extends Component {\n  render() {\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {this.props.todos.map(todo => (\n            <ToDoItem\n              title={todo.title}\n              completed={todo.completed}\n              handleDeleteToDo={() => this.props.deleteToDo(todo.id)}\n              handleCheckToDo={() => this.props.toggleToDo(todo.id)}\n            />\n          ))}\n        </ul>\n      </section>\n    );\n  }\n}\n\nconst MapDispatchToProps = { toggleToDo, deleteToDo };\n\nexport default connect(\n  null,\n  MapDispatchToProps\n)(TodoList);\n","export const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const CLEAR_COMPLETED_TODOS = \"CLEAR_COMPLETED_TODOS\";\n\nexport const toggleToDo = id => {\n  return {\n    type: TOGGLE_TODO,\n    payload: id\n  };\n};\n\nexport const addTodo = title => {\n  return {\n    type: ADD_TODO,\n    payload: title\n  };\n};\n\nexport const deleteToDo = id => {\n  return {\n    type: DELETE_TODO,\n    payload: id\n  };\n};\n\nexport const clearCompletedToDos = () => {\n  return {\n    type: CLEAR_COMPLETED_TODOS\n  };\n};\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport TodoList from \"./ToDoList\";\nimport { NavLink, Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { addTodo, clearCompletedToDos } from \"./Actions\";\n\nclass App extends Component {\n  state = {\n    value: \"\"\n  };\n\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleAddToDo = event => {\n    if (event.key === \"Enter\") {\n      this.props.addTodo(this.state.value);\n      this.setState({ value: \"\" });\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            onKeyDown={this.handleAddToDo}\n            value={this.state.value}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autofocus\n            onChange={this.handleChange}\n          />\n        </header>\n        <Route\n          exact\n          path=\"/\"\n          render={() => {\n            return <TodoList todos={this.props.todos} />;\n          }}\n        />\n        <Route\n          exact\n          path=\"/active\"\n          render={() => {\n            return (\n              <TodoList\n                todos={this.props.todos.filter(\n                  todo => todo.completed === false\n                )}\n              />\n            );\n          }}\n        />\n        <Route\n          exact\n          path=\"/completed\"\n          render={() => {\n            return (\n              <TodoList\n                todos={this.props.todos.filter(\n                  todo => todo.completed !== false\n                )}\n              />\n            );\n          }}\n        />\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>\n              `\n              {this.props.todos.filter(todo => todo.completed === false).length}\n              `\n            </strong>{\" \"}\n            item(s) left\n          </span>\n          <ul className=\"filters\">\n            <li>\n              <NavLink exact activeClassName=\"selected\" to=\"/\">\n                All\n              </NavLink>\n            </li>\n            <li>\n              <NavLink activeClassName=\"selected\" to=\"/active\">\n                Active\n              </NavLink>\n            </li>\n            <li>\n              <NavLink activeClassName=\"selected\" to=\"/completed\">\n                Completed\n              </NavLink>\n            </li>\n          </ul>\n          <button\n            onClick={this.props.clearCompletedToDos}\n            className=\"clear-completed\"\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nfunction MapStateToProps(state) {\n  return {\n    todos: state.todoList\n  };\n}\n\nconst mapDispatchToProps = { addTodo, clearCompletedToDos };\n\nexport default connect(\n  MapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  TOGGLE_TODO,\n  ADD_TODO,\n  DELETE_TODO,\n  CLEAR_COMPLETED_TODOS\n} from \"../Actions/index.js\";\nimport todoList from \"../todos.json\";\n\nconst initialState = {\n  todoList\n};\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      let makeId = Math.floor(Math.random() * 500000000);\n      let newest = {\n        userId: 1,\n        id: makeId,\n        title: action.payload,\n        completed: false\n      };\n      return {\n        ...state,\n        todoList: [...state.todoList, newest]\n      };\n\n    case CLEAR_COMPLETED_TODOS:\n      const newTodosDeleteComp = state.todoList.filter(todo => !todo.completed);\n      return {\n        ...state,\n        todoList: newTodosDeleteComp\n      };\n\n    case DELETE_TODO:\n      const newTodosDelete = state.todoList.filter(todo => {\n        if (todo.id === action.payload) {\n          return false;\n        }\n\n        return true;\n      });\n      return {\n        ...state,\n        todoList: newTodosDelete\n      };\n\n    case TOGGLE_TODO:\n      const newTodosToggle = state.todoList.map(todo => {\n        if (todo.id === action.payload) {\n          todo.completed = !todo.completed;\n        }\n\n        return todo;\n      });\n      return {\n        ...state,\n        todoList: newTodosToggle\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport todoReducer from \"./Reducer\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nlet store = createStore(todoReducer);\n\nconst Index = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={store}>\n      <Route render={props => <App pathname={props.location.pathname} />} />\n    </Provider>\n  </BrowserRouter>\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}